import torch
from PIL import Image
from IPython.display import display
from transformers import CLIPProcessor, CLIPModel
from sklearn.metrics.pairwise import cosine_similarity

# Define aesthetic labels
style_labels = [
    "Minimalist", "Vintage", "Modern", "Rustic", "Luxurious",
    "Bohemian", "Industrial", "Artistic", "Playful", "Cozy"
]

# Load CLIP model
clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

def predict_image_style(image_path):
    image = Image.open(image_path).convert("RGB")
    inputs = clip_processor(text=style_labels, images=image, return_tensors="pt", padding=True)

    with torch.no_grad():
        outputs = clip_model(**inputs)
        logits_per_image = outputs.logits_per_image
        probs = logits_per_image.softmax(dim=1).squeeze()

    top_style_index = torch.argmax(probs).item()
    top_style = style_labels[top_style_index]

    return top_style, probs[top_style_index].item()

def filter_captions_by_style(captions, predicted_style):
    style_keywords = {
        "Minimalist": ["simple", "calm", "clean", "ritual"],
        "Vintage": ["tradition", "home", "comfort"],
        "Modern": ["difference", "escape", "bold", "refresh"],
        "Rustic": ["nature", "warmth", "journey"],
        "Luxurious": ["indulgence", "delight", "bliss"],
        "Bohemian": ["explore", "wanderlust", "peace"],
        "Industrial": ["strength", "bold"],
        "Artistic": ["savor", "flavor", "moment", "bliss"],
        "Playful": ["sip", "taste", "joy", "fun"],
        "Cozy": ["warmth", "comfort", "home", "relax"]
    }

    keywords = style_keywords.get(predicted_style, [])
    filtered = [caption for caption in captions if any(k.lower() in caption.lower() for k in keywords)]
    return filtered if filtered else captions

def load_and_preprocess_image(image_path):
    image = Image.open(image_path).convert("RGB")
    inputs = clip_processor(images=image, return_tensors="pt")
    return inputs

def generate_image_embeddings(inputs):
    with torch.no_grad():
        image_features = clip_model.get_image_features(**inputs)
    return image_features

def match_captions(image_features, captions):
    text_inputs = clip_processor(text=captions, return_tensors="pt", padding=True)
    with torch.no_grad():
        text_features = clip_model.get_text_features(**text_inputs)

    image_features = image_features.detach().cpu().numpy()
    text_features = text_features.detach().cpu().numpy()

    similarities = cosine_similarity(image_features, text_features)
    best_indices = similarities.argsort(axis=1)[0][::-1]
    best_captions = [captions[i] for i in best_indices]

    return best_captions, similarities[0][best_indices].tolist()

def image_captioning(image_path, candidate_captions):
    predicted_style, confidence = predict_image_style(image_path)
    print(f"\nüîç Predicted Style: {predicted_style} (confidence: {confidence:.4f})")

    filtered_captions = filter_captions_by_style(candidate_captions, predicted_style)
    inputs = load_and_preprocess_image(image_path)
    image_features = generate_image_embeddings(inputs)
    best_captions, similarities = match_captions(image_features, filtered_captions)

    return best_captions, similarities, predicted_style

image_path = r"path"

#  Your captions
candidate_captions = [
    "Trees, Travel and Tea!",
    "A refreshing beverage.",
    "A moment of indulgence.",
    "The perfect thirst quencher.",
    "Your daily dose of delight.",
    "Taste the tradition.",
    "Savor the flavor.",
    "Refresh and rejuvenate.",
    "Unwind and enjoy.",
    "The taste of home.",
    "A treat for your senses.",
    "A taste of adventure.",
    "A moment of bliss.",
    "Your travel companion.",
    "Fuel for your journey.",
    "The essence of nature.",
    "The warmth of comfort.",
    "A sip of happiness.",
    "Pure indulgence.",
    "Quench your thirst, ignite your spirit.",
    "Awaken your senses, embrace the moment.",
    "The taste of faraway lands.",
    "A taste of home, wherever you are.",
    "Your daily dose of delight.",
    "Your moment of serenity.",
    "The perfect pick-me-up.",
    "The perfect way to unwind.",
    "Taste the difference.",
    "Experience the difference.",
    "A refreshing escape.",
    "A delightful escape.",
    "The taste of tradition, the spirit of adventure.",
    "The warmth of home, the joy of discovery.",
    "Your passport to flavor.",
    "Your ticket to tranquility.",
    "Sip, savor, and explore.",
    "Indulge, relax, and rejuvenate.",
    "The taste of wanderlust.",
    "The comfort of home.",
    "A journey for your taste buds.",
    "A haven for your senses.",
    "Your refreshing companion.",
    "Your delightful escape.",
    "Taste the world, one sip at a time.",
    "Embrace the moment, one cup at a time.",
    "The essence of exploration.",
    "The comfort of connection.",
    "Quench your thirst for adventure.",
    "Savor the moment of peace.",
    "The taste of discovery.",
    "The warmth of belonging.",
    "Your travel companion, your daily delight.",
    "Your moment of peace, your daily indulgence.",
    "The spirit of exploration, the comfort of home.",
    "The joy of discovery, the warmth of connection.",
    "Sip, savor, and set off on an adventure.",
    "Indulge, relax, and find your peace.",
    "A delightful beverage.",
    "A moment of relaxation.",
    "The perfect way to start your day.",
    "The perfect way to end your day.",
    "A treat for yourself.",
    "Something to savor.",
    "A moment of calm.",
    "A taste of something special.",
    "A refreshing pick-me-up.",
    "A comforting drink.",
    "A taste of adventure.",
    "A moment of peace.",
    "A small indulgence.",
    "A daily ritual.",
    "A way to connect with others.",
    "A way to connect with yourself.",
    "A taste of home.",
    "A taste of something new.",
    "A moment to enjoy.",
    "A moment to remember."
]

#  Run captioning
best_captions, similarities, style = image_captioning(image_path, candidate_captions)

#  Top 5 results
top_n = min(5, len(best_captions))
top_best_captions = best_captions[:top_n]
top_similarities = similarities[:top_n]

print("\nüèÜ Top 5 Best Captions:")
for i, (caption, similarity) in enumerate(zip(top_best_captions, top_similarities)):
    print(f"{i+1}. {caption} (Similarity: {similarity:.4f})")

# üñºÔ∏è Display the image
img = Image.open(image_path)
print("\nüì∑ Input Image:")
display(img)
